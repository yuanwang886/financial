<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.finance.p2p.dao.WalletMapper" >
  <resultMap id="BaseResultMap" type="com.finance.p2p.entity.Wallet" >
    <id column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="buy_money" property="buyMoney" jdbcType="DECIMAL" />
    <result column="sell_money" property="sellMoney" jdbcType="DECIMAL" />
    <result column="integrity" property="integrity" jdbcType="DECIMAL" />
    <result column="interest" property="interest" jdbcType="DECIMAL" />
    <result column="cantraded" property="cantraded" jdbcType="DECIMAL" />
    <result column="freeze" property="freeze" jdbcType="DECIMAL" />
    <result column="wallet" property="wallet" jdbcType="DECIMAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, buy_money, sell_money, integrity, interest, cantraded, freeze, wallet, create_time, 
    modify_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from p2p_wallet
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from p2p_wallet
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.finance.p2p.entity.Wallet" >
    insert into p2p_wallet (user_id, buy_money, sell_money, 
      integrity, interest, cantraded, 
      freeze, wallet, create_time, 
      modify_time)
    values (#{userId,jdbcType=BIGINT}, #{buyMoney,jdbcType=DECIMAL}, #{sellMoney,jdbcType=DECIMAL}, 
      #{integrity,jdbcType=DECIMAL}, #{interest,jdbcType=DECIMAL}, #{cantraded,jdbcType=DECIMAL}, 
      #{freeze,jdbcType=DECIMAL}, #{wallet,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, 
      #{modifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.finance.p2p.entity.Wallet" >
    insert into p2p_wallet
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="buyMoney != null" >
        buy_money,
      </if>
      <if test="sellMoney != null" >
        sell_money,
      </if>
      <if test="integrity != null" >
        integrity,
      </if>
      <if test="interest != null" >
        interest,
      </if>
      <if test="cantraded != null" >
        cantraded,
      </if>
      <if test="freeze != null" >
        freeze,
      </if>
      <if test="wallet != null" >
        wallet,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="buyMoney != null" >
        #{buyMoney,jdbcType=DECIMAL},
      </if>
      <if test="sellMoney != null" >
        #{sellMoney,jdbcType=DECIMAL},
      </if>
      <if test="integrity != null" >
        #{integrity,jdbcType=DECIMAL},
      </if>
      <if test="interest != null" >
        #{interest,jdbcType=DECIMAL},
      </if>
      <if test="cantraded != null" >
        #{cantraded,jdbcType=DECIMAL},
      </if>
      <if test="freeze != null" >
        #{freeze,jdbcType=DECIMAL},
      </if>
      <if test="wallet != null" >
        #{wallet,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.finance.p2p.entity.Wallet" >
    update p2p_wallet
    <set >
      <if test="buyMoney != null" >
        buy_money = #{buyMoney,jdbcType=DECIMAL},
      </if>
      <if test="sellMoney != null" >
        sell_money = #{sellMoney,jdbcType=DECIMAL},
      </if>
      <if test="integrity != null" >
        integrity = #{integrity,jdbcType=DECIMAL},
      </if>
      <if test="interest != null" >
        interest = #{interest,jdbcType=DECIMAL},
      </if>
      <if test="cantraded != null" >
        cantraded = #{cantraded,jdbcType=DECIMAL},
      </if>
      <if test="freeze != null" >
        freeze = #{freeze,jdbcType=DECIMAL},
      </if>
      <if test="wallet != null" >
        wallet = #{wallet,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.finance.p2p.entity.Wallet" >
    update p2p_wallet
    set buy_money = #{buyMoney,jdbcType=DECIMAL},
      sell_money = #{sellMoney,jdbcType=DECIMAL},
      integrity = #{integrity,jdbcType=DECIMAL},
      interest = #{interest,jdbcType=DECIMAL},
      cantraded = #{cantraded,jdbcType=DECIMAL},
      freeze = #{freeze,jdbcType=DECIMAL},
      wallet = #{wallet,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  
  <select id="selectWalletBig" resultType="java.lang.Long" >
    select user_id
    from p2p_wallet
    where wallet > 0
  </select>
  
 <select id="statistics" resultType="com.finance.p2p.biz.sys.bean.MainBean" >
    select count(1) personNum,
         (select count(1) from p2p_user where state = 1) personLockNum,
    	 sum(buy_money) buyMoney, 
    	 sum(sell_money) sellMoney
    from p2p_wallet
  </select>
  
  
  <!-- 采用金额相加的方式处理 对于可以卖出金额比较特殊，我们采用直接复制的方式-->
 <update id="updateUserWallet" parameterType="com.finance.p2p.entity.Wallet" >
    update p2p_wallet
    set 
   	  buy_money = #{buyMoney,jdbcType=DECIMAL} + buy_money,
      sell_money = #{sellMoney,jdbcType=DECIMAL} + sell_money,
      integrity = #{integrity,jdbcType=DECIMAL} + integrity,
      interest = #{interest,jdbcType=DECIMAL} + interest,
      cantraded = #{cantraded,jdbcType=DECIMAL} + cantraded,
      freeze = #{freeze,jdbcType=DECIMAL} + freeze,
      wallet = #{wallet,jdbcType=DECIMAL} + wallet,
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  
  <update id="updateWallet" parameterType="com.finance.p2p.entity.Wallet" >
    update p2p_wallet
    set 
   	  buy_money = #{buyMoney,jdbcType=DECIMAL} + buy_money,
      sell_money = #{sellMoney,jdbcType=DECIMAL} + sell_money,
      integrity = #{integrity,jdbcType=DECIMAL} + integrity,
      interest = #{interest,jdbcType=DECIMAL} + interest,
      cantraded = #{cantraded,jdbcType=DECIMAL},
      freeze = #{freeze,jdbcType=DECIMAL} + freeze,
      wallet = #{wallet,jdbcType=DECIMAL} + wallet,
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
</mapper>